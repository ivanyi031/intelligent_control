# -*- coding: utf-8 -*-
"""HW5-1 (1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fwe9pFxvkQICDUTkDspGOTZsDP9EsUP6

# 1. Import Library
"""

from keras.datasets import mnist
from keras.utils import np_utils
import numpy as np
np.random.seed(10)

"""# 資料預處理

讀取mnist資料
"""

(x_Train, y_Train), (x_Test, y_Test) = mnist.load_data()

"""將features 轉換為4維矩陣"""

x_Train4D=x_Train.reshape(x_Train.shape[0],28,28,1).astype('float32')
x_Test4D=x_Test.reshape(x_Test.shape[0],28,28,1).astype('float32')

"""將features 標準化"""

x_Train4D_normalize = x_Train4D / 255
x_Test4D_normalize = x_Test4D / 255

"""labal 以onehot encoding轉換"""

y_TrainOneHot = np_utils.to_categorical(y_Train)
y_TestOneHot = np_utils.to_categorical(y_Test)

"""# 建立模型

匯入模組
"""

from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D

"""建立keras的sequential"""

model = Sequential()

"""建立卷積層1"""

model.add(Conv2D(filters=36,
                 kernel_size=(3,3),
                 padding='same',
                 input_shape=(28,28,1), 
                 activation='relu'))

"""建立池化層1"""

model.add(MaxPooling2D(pool_size=(2, 2)))

"""建立卷積層2"""

model.add(Conv2D(filters=36,
                 kernel_size=(3,3),
                 padding='same',
                 activation='relu'))

"""建立池化層2"""

model.add(MaxPooling2D(pool_size=(2, 2)))

"""加入Dropout 避免overfitting"""

model.add(Dropout(0.25))

"""建立卷積層3"""

model.add(Conv2D(filters=36,
                 kernel_size=(3,3),
                 padding='same',
                 activation='relu'))

"""建立池化層3"""

model.add(MaxPooling2D(pool_size=(2,2)))

"""加入Dropout 避免overfitting"""

model.add(Dropout(0.25))

"""建立神經網路(平坦層、隱藏層、輸出層)

建立平坦層
"""

model.add(Flatten())

"""建立隱藏層"""

model.add(Dense(256, activation='relu'))

model.add(Dropout(0.25))

"""建立輸出層"""

model.add(Dense(10,activation='softmax'))

"""查看模型"""

print(model.summary())

"""# 訓練模型

定義訓練
"""

model.compile(loss='categorical_crossentropy',
              optimizer='adam',metrics=['accuracy'])

"""開始訓練"""

train_history=model.fit(x=x_Train4D_normalize, 
                        y=y_TrainOneHot,validation_split=0.2, 
                        epochs=200, batch_size=300,verbose=2)

import matplotlib.pyplot as plt
def show_train_history(train_acc,test_acc):
    plt.plot(train_history.history[train_acc])
    plt.plot(train_history.history[test_acc])
    plt.title('Train History')
    plt.ylabel('Accuracy')
    plt.xlabel('Epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.show()

"""畫出訓練結果"""

show_train_history('accuracy','val_accuracy')

"""畫出loss誤差執行結果"""

show_train_history('loss','val_loss')

"""# 評估模型準確率"""

scores = model.evaluate(x_Test4D_normalize , y_TestOneHot)
scores[1]

"""# 預測結果"""

prediction= np.argmax(model.predict(x_Test),axis=1)

prediction[:10]

"""# 查看預測結果"""

import matplotlib.pyplot as plt
def plot_images_labels_prediction(images,labels,prediction,idx,num=10):
    fig = plt.gcf()
    fig.set_size_inches(12, 14)
    if num>25: num=25 
    for i in range(0, num):
        ax=plt.subplot(5,5, 1+i)
        ax.imshow(images[idx], cmap='binary')

        ax.set_title("label=" +str(labels[idx])+
                     ",predict="+str(prediction[idx])
                     ,fontsize=10) 
        
        ax.set_xticks([]);ax.set_yticks([])        
        idx+=1 
    plt.show()

plot_images_labels_prediction(x_Test,y_Test,prediction,idx=0)

"""# confusion matrix"""

import pandas as pd
pd.crosstab(y_Test,prediction,
            rownames=['label'],colnames=['predict'])

df = pd.DataFrame({'label':y_Test, 'predict':prediction})

df[(df.label==5)&(df.predict==3)]